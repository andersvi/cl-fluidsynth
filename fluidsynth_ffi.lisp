;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.10
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :cl-fluidsynth)

;;; LINK IN FLUIDSYNTH LIB:

(define-foreign-library fluidsynth
  (t (:default "libfluidsynth")))

(use-foreign-library fluidsynth)

;;; wrapper code for various ../include/fluidsynth/*.h

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defctype fluid_settings_t :pointer)

(cffi:defctype fluid_synth_t :pointer)

(cffi:defctype fluid_synth_channel_info_t :pointer)

(cffi:defctype fluid_voice_t :pointer)

(cffi:defctype fluid_sfloader_t :pointer)

(cffi:defctype fluid_sfont_t :pointer)

(cffi:defctype fluid_preset_t :pointer)

(cffi:defctype fluid_sample_t :pointer)

(cffi:defctype fluid_mod_t :pointer)

(cffi:defctype fluid_audio_driver_t :pointer)

(cffi:defctype fluid_file_renderer_t :pointer)

(cffi:defctype fluid_player_t :pointer)

(cffi:defctype fluid_midi_event_t :pointer)

(cffi:defctype fluid_midi_driver_t :pointer)

(cffi:defctype fluid_midi_router_t :pointer)

(cffi:defctype fluid_midi_router_rule_t :pointer)

(cffi:defctype fluid_cmd_handler_t :pointer)

(cffi:defctype fluid_shell_t :pointer)

(cffi:defctype fluid_server_t :pointer)

(cffi:defctype fluid_event_t :pointer)

(cffi:defctype fluid_sequencer_t :pointer)

(cffi:defctype fluid_ramsfont_t :pointer)

(cffi:defctype fluid_rampreset_t :pointer)

(cffi:defctype fluid_istream_t :int)

(cffi:defctype fluid_ostream_t :int)

(cl:defconstant FLUID_HINT_BOUNDED_BELOW #x1)

(cl:defconstant FLUID_HINT_BOUNDED_ABOVE #x2)

(cl:defconstant FLUID_HINT_TOGGLED #x4)

(cl:defconstant FLUID_HINT_SAMPLE_RATE #x8)

(cl:defconstant FLUID_HINT_LOGARITHMIC #x10)

(cl:defconstant FLUID_HINT_INTEGER #x20)

(cl:defconstant FLUID_HINT_FILENAME #x01)

(cl:defconstant FLUID_HINT_OPTIONLIST #x02)

(cffi:defcenum fluid_types_enum
	(:FLUID_NO_TYPE #.-1)
	:FLUID_NUM_TYPE
	:FLUID_INT_TYPE
	:FLUID_STR_TYPE
	:FLUID_SET_TYPE)

(cffi:defcfun ("new_fluid_settings" new_fluid_settings) :pointer)

(cffi:defcfun ("delete_fluid_settings" delete_fluid_settings) :void
  (settings :pointer))

(cffi:defcfun ("fluid_settings_get_type" fluid_settings_get_type) :int
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_get_hints" fluid_settings_get_hints) :int
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_is_realtime" fluid_settings_is_realtime) :int
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_setstr" fluid_settings_setstr) :int
  (settings :pointer)
  (name :string)
  (str :string))

(cffi:defcfun ("fluid_settings_copystr" fluid_settings_copystr) :int
  (settings :pointer)
  (name :string)
  (str :string)
  (len :int))

(cffi:defcfun ("fluid_settings_dupstr" fluid_settings_dupstr) :int
  (settings :pointer)
  (name :string)
  (str :pointer))

(cffi:defcfun ("fluid_settings_getstr" fluid_settings_getstr) :int
  (settings :pointer)
  (name :string)
  (str :pointer))

(cffi:defcfun ("fluid_settings_getstr_default" fluid_settings_getstr_default) :string
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_str_equal" fluid_settings_str_equal) :int
  (settings :pointer)
  (name :string)
  (value :string))

(cffi:defcfun ("fluid_settings_setnum" fluid_settings_setnum) :int
  (settings :pointer)
  (name :string)
  (val :double))

(cffi:defcfun ("fluid_settings_getnum" fluid_settings_getnum) :int
  (settings :pointer)
  (name :string)
  (val :pointer))

(cffi:defcfun ("fluid_settings_getnum_default" fluid_settings_getnum_default) :double
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_getnum_range" fluid_settings_getnum_range) :void
  (settings :pointer)
  (name :string)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("fluid_settings_setint" fluid_settings_setint) :int
  (settings :pointer)
  (name :string)
  (val :int))

(cffi:defcfun ("fluid_settings_getint" fluid_settings_getint) :int
  (settings :pointer)
  (name :string)
  (val :pointer))

(cffi:defcfun ("fluid_settings_getint_default" fluid_settings_getint_default) :int
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_getint_range" fluid_settings_getint_range) :void
  (settings :pointer)
  (name :string)
  (min :pointer)
  (max :pointer))

(cffi:defctype fluid_settings_foreach_option_t :pointer)

(cffi:defcfun ("fluid_settings_foreach_option" fluid_settings_foreach_option) :void
  (settings :pointer)
  (name :string)
  (data :pointer)
  (func :pointer))

(cffi:defcfun ("fluid_settings_option_count" fluid_settings_option_count) :int
  (settings :pointer)
  (name :string))

(cffi:defcfun ("fluid_settings_option_concat" fluid_settings_option_concat) :string
  (settings :pointer)
  (name :string)
  (separator :string))

(cffi:defctype fluid_settings_foreach_t :pointer)

(cffi:defcfun ("fluid_settings_foreach" fluid_settings_foreach) :void
  (settings :pointer)
  (data :pointer)
  (func :pointer))

(cl:defconstant FLUID_SYNTH_CHANNEL_INFO_NAME_SIZE 32)

(cffi:defcstruct _fluid_synth_channel_info_t
	(assigned :int)
	(sfont_id :int)
	(bank :int)
	(program :int)
	(name :pointer)
	(reserved :pointer))

(cffi:defcfun ("new_fluid_synth" new_fluid_synth) :pointer
  (settings :pointer))

(cffi:defcfun ("delete_fluid_synth" delete_fluid_synth) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_settings" fluid_synth_get_settings) :pointer
  (synth :pointer))

(cffi:defcfun ("fluid_synth_noteon" fluid_synth_noteon) :int
  (synth :pointer)
  (chan :int)
  (key :int)
  (vel :int))

(cffi:defcfun ("fluid_synth_noteoff" fluid_synth_noteoff) :int
  (synth :pointer)
  (chan :int)
  (key :int))

(cffi:defcfun ("fluid_synth_cc" fluid_synth_cc) :int
  (synth :pointer)
  (chan :int)
  (ctrl :int)
  (val :int))

(cffi:defcfun ("fluid_synth_get_cc" fluid_synth_get_cc) :int
  (synth :pointer)
  (chan :int)
  (ctrl :int)
  (pval :pointer))

(cffi:defcfun ("fluid_synth_sysex" fluid_synth_sysex) :int
  (synth :pointer)
  (data :string)
  (len :int)
  (response :string)
  (response_len :pointer)
  (handled :pointer)
  (dryrun :int))

(cffi:defcfun ("fluid_synth_pitch_bend" fluid_synth_pitch_bend) :int
  (synth :pointer)
  (chan :int)
  (val :int))

(cffi:defcfun ("fluid_synth_get_pitch_bend" fluid_synth_get_pitch_bend) :int
  (synth :pointer)
  (chan :int)
  (ppitch_bend :pointer))

(cffi:defcfun ("fluid_synth_pitch_wheel_sens" fluid_synth_pitch_wheel_sens) :int
  (synth :pointer)
  (chan :int)
  (val :int))

(cffi:defcfun ("fluid_synth_get_pitch_wheel_sens" fluid_synth_get_pitch_wheel_sens) :int
  (synth :pointer)
  (chan :int)
  (pval :pointer))

(cffi:defcfun ("fluid_synth_program_change" fluid_synth_program_change) :int
  (synth :pointer)
  (chan :int)
  (program :int))

(cffi:defcfun ("fluid_synth_channel_pressure" fluid_synth_channel_pressure) :int
  (synth :pointer)
  (chan :int)
  (val :int))

(cffi:defcfun ("fluid_synth_bank_select" fluid_synth_bank_select) :int
  (synth :pointer)
  (chan :int)
  (bank :unsigned-int))

(cffi:defcfun ("fluid_synth_sfont_select" fluid_synth_sfont_select) :int
  (synth :pointer)
  (chan :int)
  (sfont_id :unsigned-int))

(cffi:defcfun ("fluid_synth_program_select" fluid_synth_program_select) :int
  (synth :pointer)
  (chan :int)
  (sfont_id :unsigned-int)
  (bank_num :unsigned-int)
  (preset_num :unsigned-int))

(cffi:defcfun ("fluid_synth_program_select_by_sfont_name" fluid_synth_program_select_by_sfont_name) :int
  (synth :pointer)
  (chan :int)
  (sfont_name :string)
  (bank_num :unsigned-int)
  (preset_num :unsigned-int))

(cffi:defcfun ("fluid_synth_get_program" fluid_synth_get_program) :int
  (synth :pointer)
  (chan :int)
  (sfont_id :pointer)
  (bank_num :pointer)
  (preset_num :pointer))

(cffi:defcfun ("fluid_synth_unset_program" fluid_synth_unset_program) :int
  (synth :pointer)
  (chan :int))

(cffi:defcfun ("fluid_synth_get_channel_info" fluid_synth_get_channel_info) :int
  (synth :pointer)
  (chan :int)
  (info :pointer))

(cffi:defcfun ("fluid_synth_program_reset" fluid_synth_program_reset) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_system_reset" fluid_synth_system_reset) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_all_notes_off" fluid_synth_all_notes_off) :int
  (synth :pointer)
  (chan :int))

(cffi:defcfun ("fluid_synth_all_sounds_off" fluid_synth_all_sounds_off) :int
  (synth :pointer)
  (chan :int))

(cffi:defcenum fluid_midi_channel_type
	(:CHANNEL_TYPE_MELODIC #.0)
	(:CHANNEL_TYPE_DRUM #.1))

(cffi:defcfun ("fluid_synth_set_channel_type" fluid_synth_set_channel_type) :int
  (synth :pointer)
  (chan :int)
  (type :int))

(cffi:defcfun ("fluid_synth_get_channel_preset" fluid_synth_get_channel_preset) :pointer
  (synth :pointer)
  (chan :int))

(cffi:defcfun ("fluid_synth_start" fluid_synth_start) :int
  (synth :pointer)
  (id :unsigned-int)
  (preset :pointer)
  (audio_chan :int)
  (midi_chan :int)
  (key :int)
  (vel :int))

(cffi:defcfun ("fluid_synth_stop" fluid_synth_stop) :int
  (synth :pointer)
  (id :unsigned-int))

(cffi:defcfun ("fluid_synth_sfload" fluid_synth_sfload) :int
  (synth :pointer)
  (filename :string)
  (reset_presets :int))

(cffi:defcfun ("fluid_synth_sfreload" fluid_synth_sfreload) :int
  (synth :pointer)
  (id :unsigned-int))

(cffi:defcfun ("fluid_synth_sfunload" fluid_synth_sfunload) :int
  (synth :pointer)
  (id :unsigned-int)
  (reset_presets :int))

(cffi:defcfun ("fluid_synth_add_sfont" fluid_synth_add_sfont) :int
  (synth :pointer)
  (sfont :pointer))

(cffi:defcfun ("fluid_synth_remove_sfont" fluid_synth_remove_sfont) :void
  (synth :pointer)
  (sfont :pointer))

(cffi:defcfun ("fluid_synth_sfcount" fluid_synth_sfcount) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_sfont" fluid_synth_get_sfont) :pointer
  (synth :pointer)
  (num :unsigned-int))

(cffi:defcfun ("fluid_synth_get_sfont_by_id" fluid_synth_get_sfont_by_id) :pointer
  (synth :pointer)
  (id :unsigned-int))

(cffi:defcfun ("fluid_synth_get_sfont_by_name" fluid_synth_get_sfont_by_name) :pointer
  (synth :pointer)
  (name :string))

(cffi:defcfun ("fluid_synth_set_bank_offset" fluid_synth_set_bank_offset) :int
  (synth :pointer)
  (sfont_id :int)
  (offset :int))

(cffi:defcfun ("fluid_synth_get_bank_offset" fluid_synth_get_bank_offset) :int
  (synth :pointer)
  (sfont_id :int))

(cffi:defcfun ("fluid_synth_set_reverb" fluid_synth_set_reverb) :void
  (synth :pointer)
  (roomsize :double)
  (damping :double)
  (width :double)
  (level :double))

(cffi:defcfun ("fluid_synth_set_reverb_on" fluid_synth_set_reverb_on) :void
  (synth :pointer)
  (on :int))

(cffi:defcfun ("fluid_synth_get_reverb_roomsize" fluid_synth_get_reverb_roomsize) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_reverb_damp" fluid_synth_get_reverb_damp) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_reverb_level" fluid_synth_get_reverb_level) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_reverb_width" fluid_synth_get_reverb_width) :double
  (synth :pointer))

(cl:defconstant FLUID_REVERB_DEFAULT_ROOMSIZE 0.2d0)

(cl:defconstant FLUID_REVERB_DEFAULT_DAMP 0.0d0)

(cl:defconstant FLUID_REVERB_DEFAULT_WIDTH 0.5d0)

(cl:defconstant FLUID_REVERB_DEFAULT_LEVEL 0.9d0)

(cffi:defcenum fluid_chorus_mod
	(:FLUID_CHORUS_MOD_SINE #.0)
	(:FLUID_CHORUS_MOD_TRIANGLE #.1))

(cffi:defcfun ("fluid_synth_set_chorus" fluid_synth_set_chorus) :void
  (synth :pointer)
  (nr :int)
  (level :double)
  (speed :double)
  (depth_ms :double)
  (type :int))

(cffi:defcfun ("fluid_synth_set_chorus_on" fluid_synth_set_chorus_on) :void
  (synth :pointer)
  (on :int))

(cffi:defcfun ("fluid_synth_get_chorus_nr" fluid_synth_get_chorus_nr) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_chorus_level" fluid_synth_get_chorus_level) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_chorus_speed_Hz" fluid_synth_get_chorus_speed_Hz) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_chorus_depth_ms" fluid_synth_get_chorus_depth_ms) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_chorus_type" fluid_synth_get_chorus_type) :int
  (synth :pointer))

(cl:defconstant FLUID_CHORUS_DEFAULT_N 3)

(cl:defconstant FLUID_CHORUS_DEFAULT_LEVEL 2.0d0)

(cl:defconstant FLUID_CHORUS_DEFAULT_SPEED 0.3d0)

(cl:defconstant FLUID_CHORUS_DEFAULT_DEPTH 8.0d0)

(cffi:defcfun ("fluid_synth_count_midi_channels" fluid_synth_count_midi_channels) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_count_audio_channels" fluid_synth_count_audio_channels) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_count_audio_groups" fluid_synth_count_audio_groups) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_count_effects_channels" fluid_synth_count_effects_channels) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_set_sample_rate" fluid_synth_set_sample_rate) :void
  (synth :pointer)
  (sample_rate :float))

(cffi:defcfun ("fluid_synth_set_gain" fluid_synth_set_gain) :void
  (synth :pointer)
  (gain :float))

(cffi:defcfun ("fluid_synth_get_gain" fluid_synth_get_gain) :float
  (synth :pointer))

(cffi:defcfun ("fluid_synth_set_polyphony" fluid_synth_set_polyphony) :int
  (synth :pointer)
  (polyphony :int))

(cffi:defcfun ("fluid_synth_get_polyphony" fluid_synth_get_polyphony) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_active_voice_count" fluid_synth_get_active_voice_count) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_get_internal_bufsize" fluid_synth_get_internal_bufsize) :int
  (synth :pointer))

(cffi:defcfun ("fluid_synth_set_interp_method" fluid_synth_set_interp_method) :int
  (synth :pointer)
  (chan :int)
  (interp_method :int))

(cffi:defcenum fluid_interp
	(:FLUID_INTERP_NONE #.0)
	(:FLUID_INTERP_LINEAR #.1)
	(:FLUID_INTERP_4THORDER #.4)
	(:FLUID_INTERP_7THORDER #.7))

(cffi:defcfun ("fluid_synth_set_gen" fluid_synth_set_gen) :int
  (synth :pointer)
  (chan :int)
  (param :int)
  (value :float))

(cffi:defcfun ("fluid_synth_set_gen2" fluid_synth_set_gen2) :int
  (synth :pointer)
  (chan :int)
  (param :int)
  (value :float)
  (absolute :int)
  (normalized :int))

(cffi:defcfun ("fluid_synth_get_gen" fluid_synth_get_gen) :float
  (synth :pointer)
  (chan :int)
  (param :int))

(cffi:defcfun ("fluid_synth_create_key_tuning" fluid_synth_create_key_tuning) :int
  (synth :pointer)
  (bank :int)
  (prog :int)
  (name :string)
  (pitch :pointer))

(cffi:defcfun ("fluid_synth_activate_key_tuning" fluid_synth_activate_key_tuning) :int
  (synth :pointer)
  (bank :int)
  (prog :int)
  (name :string)
  (pitch :pointer)
  (apply :int))

(cffi:defcfun ("fluid_synth_create_octave_tuning" fluid_synth_create_octave_tuning) :int
  (synth :pointer)
  (bank :int)
  (prog :int)
  (name :string)
  (pitch :pointer))

(cffi:defcfun ("fluid_synth_activate_octave_tuning" fluid_synth_activate_octave_tuning) :int
  (synth :pointer)
  (bank :int)
  (prog :int)
  (name :string)
  (pitch :pointer)
  (apply :int))

(cffi:defcfun ("fluid_synth_tune_notes" fluid_synth_tune_notes) :int
  (synth :pointer)
  (bank :int)
  (prog :int)
  (len :int)
  (keys :pointer)
  (pitch :pointer)
  (apply :int))

(cffi:defcfun ("fluid_synth_select_tuning" fluid_synth_select_tuning) :int
  (synth :pointer)
  (chan :int)
  (bank :int)
  (prog :int))

(cffi:defcfun ("fluid_synth_activate_tuning" fluid_synth_activate_tuning) :int
  (synth :pointer)
  (chan :int)
  (bank :int)
  (prog :int)
  (apply :int))

(cffi:defcfun ("fluid_synth_reset_tuning" fluid_synth_reset_tuning) :int
  (synth :pointer)
  (chan :int))

(cffi:defcfun ("fluid_synth_deactivate_tuning" fluid_synth_deactivate_tuning) :int
  (synth :pointer)
  (chan :int)
  (apply :int))

(cffi:defcfun ("fluid_synth_tuning_iteration_start" fluid_synth_tuning_iteration_start) :void
  (synth :pointer))

(cffi:defcfun ("fluid_synth_tuning_iteration_next" fluid_synth_tuning_iteration_next) :int
  (synth :pointer)
  (bank :pointer)
  (prog :pointer))

(cffi:defcfun ("fluid_synth_tuning_dump" fluid_synth_tuning_dump) :int
  (synth :pointer)
  (bank :int)
  (prog :int)
  (name :string)
  (len :int)
  (pitch :pointer))

(cffi:defcfun ("fluid_synth_get_cpu_load" fluid_synth_get_cpu_load) :double
  (synth :pointer))

(cffi:defcfun ("fluid_synth_error" fluid_synth_error) :string
  (synth :pointer))

(cffi:defcfun ("fluid_synth_write_s16" fluid_synth_write_s16) :int
  (synth :pointer)
  (len :int)
  (lout :pointer)
  (loff :int)
  (lincr :int)
  (rout :pointer)
  (roff :int)
  (rincr :int))

(cffi:defcfun ("fluid_synth_write_float" fluid_synth_write_float) :int
  (synth :pointer)
  (len :int)
  (lout :pointer)
  (loff :int)
  (lincr :int)
  (rout :pointer)
  (roff :int)
  (rincr :int))

(cffi:defcfun ("fluid_synth_nwrite_float" fluid_synth_nwrite_float) :int
  (synth :pointer)
  (len :int)
  (left :pointer)
  (right :pointer)
  (fx_left :pointer)
  (fx_right :pointer))

(cffi:defcfun ("fluid_synth_process" fluid_synth_process) :int
  (synth :pointer)
  (len :int)
  (nin :int)
  (in :pointer)
  (nout :int)
  (out :pointer))

(cffi:defctype fluid_audio_callback_t :pointer)

(cffi:defcfun ("fluid_synth_add_sfloader" fluid_synth_add_sfloader) :void
  (synth :pointer)
  (loader :pointer))

(cffi:defcfun ("fluid_synth_alloc_voice" fluid_synth_alloc_voice) :pointer
  (synth :pointer)
  (sample :pointer)
  (channum :int)
  (key :int)
  (vel :int))

(cffi:defcfun ("fluid_synth_start_voice" fluid_synth_start_voice) :void
  (synth :pointer)
  (voice :pointer))

(cffi:defcfun ("fluid_synth_get_voicelist" fluid_synth_get_voicelist) :void
  (synth :pointer)
  (buf :pointer)
  (bufsize :int)
  (ID :int))

(cffi:defcfun ("fluid_synth_handle_midi_event" fluid_synth_handle_midi_event) :int
  (data :pointer)
  (event :pointer))

(cffi:defcfun ("fluid_synth_set_midi_router" fluid_synth_set_midi_router) :void
  (synth :pointer)
  (router :pointer))

(cffi:defcfun ("fluid_get_stdin" fluid_get_stdin) :int)

(cffi:defcfun ("fluid_get_stdout" fluid_get_stdout) :int)

(cffi:defcfun ("fluid_get_userconf" fluid_get_userconf) :string
  (buf :string)
  (len :int))

(cffi:defcfun ("fluid_get_sysconf" fluid_get_sysconf) :string
  (buf :string)
  (len :int))

(cffi:defctype fluid_cmd_func_t :pointer)

(cffi:defcstruct fluid_cmd_t
	(name :string)
	(topic :string)
	(handler :pointer)
	(data :pointer)
	(help :string))

(cffi:defcfun ("new_fluid_cmd_handler" new_fluid_cmd_handler) :pointer
  (synth :pointer))

(cffi:defcfun ("delete_fluid_cmd_handler" delete_fluid_cmd_handler) :void
  (handler :pointer))

(cffi:defcfun ("fluid_cmd_handler_set_synth" fluid_cmd_handler_set_synth) :void
  (handler :pointer)
  (synth :pointer))

(cffi:defcfun ("fluid_cmd_handler_register" fluid_cmd_handler_register) :int
  (handler :pointer)
  (cmd :pointer))

(cffi:defcfun ("fluid_cmd_handler_unregister" fluid_cmd_handler_unregister) :int
  (handler :pointer)
  (cmd :string))

(cffi:defcfun ("fluid_command" fluid_command) :int
  (handler :pointer)
  (cmd :string)
  (out :int))

(cffi:defcfun ("fluid_source" fluid_source) :int
  (handler :pointer)
  (filename :string))

(cffi:defcfun ("fluid_usershell" fluid_usershell) :void
  (settings :pointer)
  (handler :pointer))

(cffi:defcfun ("new_fluid_shell" new_fluid_shell) :pointer
  (settings :pointer)
  (handler :pointer)
  (in :int)
  (out :int)
  (thread :int))

(cffi:defcfun ("delete_fluid_shell" delete_fluid_shell) :void
  (shell :pointer))

(cffi:defctype fluid_server_newclient_func_t :pointer)

(cffi:defcfun ("new_fluid_server" new_fluid_server) :pointer
  (settings :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("delete_fluid_server" delete_fluid_server) :void
  (server :pointer))

(cffi:defcfun ("fluid_server_join" fluid_server_join) :int
  (server :pointer))

(defanonenum 
	FLUID_PRESET_SELECTED
	FLUID_PRESET_UNSELECTED
	FLUID_SAMPLE_DONE)

(cffi:defcstruct _fluid_sfloader_t
	(data :pointer)
	(free :pointer)
	(load :pointer))

(cffi:defcstruct _fluid_sfont_t
	(data :pointer)
	(id :unsigned-int)
	(free :pointer)
	(get_name :pointer)
	(get_preset :pointer)
	(iteration_start :pointer)
	(iteration_next :pointer))

(cffi:defcstruct _fluid_preset_t
	(data :pointer)
	(sfont :pointer)
	(free :pointer)
	(get_name :pointer)
	(get_banknum :pointer)
	(get_num :pointer)
	(noteon :pointer)
	(notify :pointer))

(cffi:defcstruct _fluid_sample_t
	(name :pointer)
	(start :unsigned-int)
	(end :unsigned-int)
	(loopstart :unsigned-int)
	(loopend :unsigned-int)
	(samplerate :unsigned-int)
	(origpitch :int)
	(pitchadj :int)
	(sampletype :int)
	(valid :int)
	(data :pointer)
	(amplitude_that_reaches_noise_floor_is_valid :int)
	(amplitude_that_reaches_noise_floor :double)
	(refcount :unsigned-int)
	(notify :pointer)
	(userdata :pointer))

(cl:defconstant FLUID_SAMPLETYPE_MONO 1)

(cl:defconstant FLUID_SAMPLETYPE_RIGHT 2)

(cl:defconstant FLUID_SAMPLETYPE_LEFT 4)

(cl:defconstant FLUID_SAMPLETYPE_LINKED 8)

(cl:defconstant FLUID_SAMPLETYPE_ROM #x8000)

(cffi:defcfun ("fluid_ramsfont_create_sfont" fluid_ramsfont_create_sfont) :pointer)

(cffi:defcfun ("fluid_ramsfont_set_name" fluid_ramsfont_set_name) :int
  (sfont :pointer)
  (name :string))

(cffi:defcfun ("fluid_ramsfont_add_izone" fluid_ramsfont_add_izone) :int
  (sfont :pointer)
  (bank :unsigned-int)
  (num :unsigned-int)
  (sample :pointer)
  (lokey :int)
  (hikey :int))

(cffi:defcfun ("fluid_ramsfont_remove_izone" fluid_ramsfont_remove_izone) :int
  (sfont :pointer)
  (bank :unsigned-int)
  (num :unsigned-int)
  (sample :pointer))

(cffi:defcfun ("fluid_ramsfont_izone_set_gen" fluid_ramsfont_izone_set_gen) :int
  (sfont :pointer)
  (bank :unsigned-int)
  (num :unsigned-int)
  (sample :pointer)
  (gen_type :int)
  (value :float))

(cffi:defcfun ("fluid_ramsfont_izone_set_loop" fluid_ramsfont_izone_set_loop) :int
  (sfont :pointer)
  (bank :unsigned-int)
  (num :unsigned-int)
  (sample :pointer)
  (on :int)
  (loopstart :float)
  (loopend :float))

(cffi:defcfun ("new_fluid_ramsample" new_fluid_ramsample) :pointer)

(cffi:defcfun ("delete_fluid_ramsample" delete_fluid_ramsample) :int
  (sample :pointer))

(cffi:defcfun ("fluid_sample_set_name" fluid_sample_set_name) :int
  (sample :pointer)
  (name :string))

(cffi:defcfun ("fluid_sample_set_sound_data" fluid_sample_set_sound_data) :int
  (sample :pointer)
  (data :pointer)
  (nbframes :unsigned-int)
  (copy_data :short)
  (rootkey :int))

(cffi:defctype fluid_audio_func_t :pointer)

(cffi:defcfun ("new_fluid_audio_driver" new_fluid_audio_driver) :pointer
  (settings :pointer)
  (synth :pointer))

(cffi:defcfun ("new_fluid_audio_driver2" new_fluid_audio_driver2) :pointer
  (settings :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("delete_fluid_audio_driver" delete_fluid_audio_driver) :void
  (driver :pointer))

(cffi:defcfun ("new_fluid_file_renderer" new_fluid_file_renderer) :pointer
  (synth :pointer))

(cffi:defcfun ("fluid_file_renderer_process_block" fluid_file_renderer_process_block) :int
  (dev :pointer))

(cffi:defcfun ("delete_fluid_file_renderer" delete_fluid_file_renderer) :void
  (dev :pointer))

(cffi:defcenum fluid_seq_event_type
	(:FLUID_SEQ_NOTE #.0)
	:FLUID_SEQ_NOTEON
	:FLUID_SEQ_NOTEOFF
	:FLUID_SEQ_ALLSOUNDSOFF
	:FLUID_SEQ_ALLNOTESOFF
	:FLUID_SEQ_BANKSELECT
	:FLUID_SEQ_PROGRAMCHANGE
	:FLUID_SEQ_PROGRAMSELECT
	:FLUID_SEQ_PITCHBEND
	:FLUID_SEQ_PITCHWHEELSENS
	:FLUID_SEQ_MODULATION
	:FLUID_SEQ_SUSTAIN
	:FLUID_SEQ_CONTROLCHANGE
	:FLUID_SEQ_PAN
	:FLUID_SEQ_VOLUME
	:FLUID_SEQ_REVERBSEND
	:FLUID_SEQ_CHORUSSEND
	:FLUID_SEQ_TIMER
	:FLUID_SEQ_ANYCONTROLCHANGE
	:FLUID_SEQ_CHANNELPRESSURE
	:FLUID_SEQ_SYSTEMRESET
	:FLUID_SEQ_UNREGISTERING
	:FLUID_SEQ_LASTEVENT)

(cffi:defcfun ("new_fluid_event" new_fluid_event) :pointer)

(cffi:defcfun ("delete_fluid_event" delete_fluid_event) :void
  (evt :pointer))

(cffi:defcfun ("fluid_event_set_source" fluid_event_set_source) :void
  (evt :pointer)
  (src :short))

(cffi:defcfun ("fluid_event_set_dest" fluid_event_set_dest) :void
  (evt :pointer)
  (dest :short))

(cffi:defcfun ("fluid_event_timer" fluid_event_timer) :void
  (evt :pointer)
  (data :pointer))

(cffi:defcfun ("fluid_event_note" fluid_event_note) :void
  (evt :pointer)
  (channel :int)
  (key :short)
  (vel :short)
  (duration :unsigned-int))

(cffi:defcfun ("fluid_event_noteon" fluid_event_noteon) :void
  (evt :pointer)
  (channel :int)
  (key :short)
  (vel :short))

(cffi:defcfun ("fluid_event_noteoff" fluid_event_noteoff) :void
  (evt :pointer)
  (channel :int)
  (key :short))

(cffi:defcfun ("fluid_event_all_sounds_off" fluid_event_all_sounds_off) :void
  (evt :pointer)
  (channel :int))

(cffi:defcfun ("fluid_event_all_notes_off" fluid_event_all_notes_off) :void
  (evt :pointer)
  (channel :int))

(cffi:defcfun ("fluid_event_bank_select" fluid_event_bank_select) :void
  (evt :pointer)
  (channel :int)
  (bank_num :short))

(cffi:defcfun ("fluid_event_program_change" fluid_event_program_change) :void
  (evt :pointer)
  (channel :int)
  (preset_num :short))

(cffi:defcfun ("fluid_event_program_select" fluid_event_program_select) :void
  (evt :pointer)
  (channel :int)
  (sfont_id :unsigned-int)
  (bank_num :short)
  (preset_num :short))

(cffi:defcfun ("fluid_event_control_change" fluid_event_control_change) :void
  (evt :pointer)
  (channel :int)
  (control :short)
  (val :short))

(cffi:defcfun ("fluid_event_pitch_bend" fluid_event_pitch_bend) :void
  (evt :pointer)
  (channel :int)
  (val :int))

(cffi:defcfun ("fluid_event_pitch_wheelsens" fluid_event_pitch_wheelsens) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_modulation" fluid_event_modulation) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_sustain" fluid_event_sustain) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_pan" fluid_event_pan) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_volume" fluid_event_volume) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_reverb_send" fluid_event_reverb_send) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_chorus_send" fluid_event_chorus_send) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_channel_pressure" fluid_event_channel_pressure) :void
  (evt :pointer)
  (channel :int)
  (val :short))

(cffi:defcfun ("fluid_event_system_reset" fluid_event_system_reset) :void
  (evt :pointer))

(cffi:defcfun ("fluid_event_any_control_change" fluid_event_any_control_change) :void
  (evt :pointer)
  (channel :int))

(cffi:defcfun ("fluid_event_unregistering" fluid_event_unregistering) :void
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_type" fluid_event_get_type) :int
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_source" fluid_event_get_source) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_dest" fluid_event_get_dest) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_channel" fluid_event_get_channel) :int
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_key" fluid_event_get_key) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_velocity" fluid_event_get_velocity) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_control" fluid_event_get_control) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_value" fluid_event_get_value) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_program" fluid_event_get_program) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_data" fluid_event_get_data) :pointer
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_duration" fluid_event_get_duration) :unsigned-int
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_bank" fluid_event_get_bank) :short
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_pitch" fluid_event_get_pitch) :int
  (evt :pointer))

(cffi:defcfun ("fluid_event_get_sfont_id" fluid_event_get_sfont_id) :unsigned-int
  (evt :pointer))

(cffi:defcfun ("new_fluid_midi_event" new_fluid_midi_event) :pointer)

(cffi:defcfun ("delete_fluid_midi_event" delete_fluid_midi_event) :int
  (event :pointer))

(cffi:defcfun ("fluid_midi_event_set_type" fluid_midi_event_set_type) :int
  (evt :pointer)
  (type :int))

(cffi:defcfun ("fluid_midi_event_get_type" fluid_midi_event_get_type) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_channel" fluid_midi_event_set_channel) :int
  (evt :pointer)
  (chan :int))

(cffi:defcfun ("fluid_midi_event_get_channel" fluid_midi_event_get_channel) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_get_key" fluid_midi_event_get_key) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_key" fluid_midi_event_set_key) :int
  (evt :pointer)
  (key :int))

(cffi:defcfun ("fluid_midi_event_get_velocity" fluid_midi_event_get_velocity) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_velocity" fluid_midi_event_set_velocity) :int
  (evt :pointer)
  (vel :int))

(cffi:defcfun ("fluid_midi_event_get_control" fluid_midi_event_get_control) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_control" fluid_midi_event_set_control) :int
  (evt :pointer)
  (ctrl :int))

(cffi:defcfun ("fluid_midi_event_get_value" fluid_midi_event_get_value) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_value" fluid_midi_event_set_value) :int
  (evt :pointer)
  (val :int))

(cffi:defcfun ("fluid_midi_event_get_program" fluid_midi_event_get_program) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_program" fluid_midi_event_set_program) :int
  (evt :pointer)
  (val :int))

(cffi:defcfun ("fluid_midi_event_get_pitch" fluid_midi_event_get_pitch) :int
  (evt :pointer))

(cffi:defcfun ("fluid_midi_event_set_pitch" fluid_midi_event_set_pitch) :int
  (evt :pointer)
  (val :int))

(cffi:defcfun ("fluid_midi_event_set_sysex" fluid_midi_event_set_sysex) :int
  (evt :pointer)
  (data :pointer)
  (size :int)
  (dynamic :int))

(cffi:defcenum fluid_midi_router_rule_type
	:FLUID_MIDI_ROUTER_RULE_NOTE
	:FLUID_MIDI_ROUTER_RULE_CC
	:FLUID_MIDI_ROUTER_RULE_PROG_CHANGE
	:FLUID_MIDI_ROUTER_RULE_PITCH_BEND
	:FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE
	:FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE
	:FLUID_MIDI_ROUTER_RULE_COUNT)

(cffi:defctype handle_midi_event_func_t :pointer)

(cffi:defcfun ("new_fluid_midi_router" new_fluid_midi_router) :pointer
  (settings :pointer)
  (handler :pointer)
  (event_handler_data :pointer))

(cffi:defcfun ("delete_fluid_midi_router" delete_fluid_midi_router) :int
  (handler :pointer))

(cffi:defcfun ("fluid_midi_router_set_default_rules" fluid_midi_router_set_default_rules) :int
  (router :pointer))

(cffi:defcfun ("fluid_midi_router_clear_rules" fluid_midi_router_clear_rules) :int
  (router :pointer))

(cffi:defcfun ("fluid_midi_router_add_rule" fluid_midi_router_add_rule) :int
  (router :pointer)
  (rule :pointer)
  (type :int))

(cffi:defcfun ("new_fluid_midi_router_rule" new_fluid_midi_router_rule) :pointer)

(cffi:defcfun ("delete_fluid_midi_router_rule" delete_fluid_midi_router_rule) :void
  (rule :pointer))

(cffi:defcfun ("fluid_midi_router_rule_set_chan" fluid_midi_router_rule_set_chan) :void
  (rule :pointer)
  (min :int)
  (max :int)
  (mul :float)
  (add :int))

(cffi:defcfun ("fluid_midi_router_rule_set_param1" fluid_midi_router_rule_set_param1) :void
  (rule :pointer)
  (min :int)
  (max :int)
  (mul :float)
  (add :int))

(cffi:defcfun ("fluid_midi_router_rule_set_param2" fluid_midi_router_rule_set_param2) :void
  (rule :pointer)
  (min :int)
  (max :int)
  (mul :float)
  (add :int))

(cffi:defcfun ("fluid_midi_router_handle_midi_event" fluid_midi_router_handle_midi_event) :int
  (data :pointer)
  (event :pointer))

(cffi:defcfun ("fluid_midi_dump_prerouter" fluid_midi_dump_prerouter) :int
  (data :pointer)
  (event :pointer))

(cffi:defcfun ("fluid_midi_dump_postrouter" fluid_midi_dump_postrouter) :int
  (data :pointer)
  (event :pointer))

(cffi:defcfun ("new_fluid_midi_driver" new_fluid_midi_driver) :pointer
  (settings :pointer)
  (handler :pointer)
  (event_handler_data :pointer))

(cffi:defcfun ("delete_fluid_midi_driver" delete_fluid_midi_driver) :void
  (driver :pointer))

(cffi:defcenum fluid_player_status
	:FLUID_PLAYER_READY
	:FLUID_PLAYER_PLAYING
	:FLUID_PLAYER_DONE)

(cffi:defcfun ("new_fluid_player" new_fluid_player) :pointer
  (synth :pointer))

(cffi:defcfun ("delete_fluid_player" delete_fluid_player) :int
  (player :pointer))

(cffi:defcfun ("fluid_player_add" fluid_player_add) :int
  (player :pointer)
  (midifile :string))

(cffi:defcfun ("fluid_player_add_mem" fluid_player_add_mem) :int
  (player :pointer)
  (buffer :pointer)
  (len :pointer))

(cffi:defcfun ("fluid_player_play" fluid_player_play) :int
  (player :pointer))

(cffi:defcfun ("fluid_player_stop" fluid_player_stop) :int
  (player :pointer))

(cffi:defcfun ("fluid_player_join" fluid_player_join) :int
  (player :pointer))

(cffi:defcfun ("fluid_player_set_loop" fluid_player_set_loop) :int
  (player :pointer)
  (loop :int))

(cffi:defcfun ("fluid_player_set_midi_tempo" fluid_player_set_midi_tempo) :int
  (player :pointer)
  (tempo :int))

(cffi:defcfun ("fluid_player_set_bpm" fluid_player_set_bpm) :int
  (player :pointer)
  (bpm :int))

(cffi:defcfun ("fluid_player_get_status" fluid_player_get_status) :int
  (player :pointer))

(cffi:defcfun ("fluid_player_set_playback_callback" fluid_player_set_playback_callback) :int
  (player :pointer)
  (handler :pointer)
  (handler_data :pointer))

(cffi:defctype fluid_event_callback_t :pointer)

(cffi:defcfun ("new_fluid_sequencer" new_fluid_sequencer) :pointer)

(cffi:defcfun ("new_fluid_sequencer2" new_fluid_sequencer2) :pointer
  (use_system_timer :int))

(cffi:defcfun ("delete_fluid_sequencer" delete_fluid_sequencer) :void
  (seq :pointer))

(cffi:defcfun ("fluid_sequencer_get_use_system_timer" fluid_sequencer_get_use_system_timer) :int
  (seq :pointer))

(cffi:defcfun ("fluid_sequencer_register_client" fluid_sequencer_register_client) :short
  (seq :pointer)
  (name :string)
  (callback :pointer)
  (data :pointer))

(cffi:defcfun ("fluid_sequencer_unregister_client" fluid_sequencer_unregister_client) :void
  (seq :pointer)
  (id :short))

(cffi:defcfun ("fluid_sequencer_count_clients" fluid_sequencer_count_clients) :int
  (seq :pointer))

(cffi:defcfun ("fluid_sequencer_get_client_id" fluid_sequencer_get_client_id) :short
  (seq :pointer)
  (index :int))

(cffi:defcfun ("fluid_sequencer_get_client_name" fluid_sequencer_get_client_name) :string
  (seq :pointer)
  (id :int))

(cffi:defcfun ("fluid_sequencer_client_is_dest" fluid_sequencer_client_is_dest) :int
  (seq :pointer)
  (id :int))

(cffi:defcfun ("fluid_sequencer_process" fluid_sequencer_process) :void
  (seq :pointer)
  (msec :unsigned-int))

(cffi:defcfun ("fluid_sequencer_send_now" fluid_sequencer_send_now) :void
  (seq :pointer)
  (evt :pointer))

(cffi:defcfun ("fluid_sequencer_send_at" fluid_sequencer_send_at) :int
  (seq :pointer)
  (evt :pointer)
  (time :unsigned-int)
  (absolute :int))

(cffi:defcfun ("fluid_sequencer_remove_events" fluid_sequencer_remove_events) :void
  (seq :pointer)
  (source :short)
  (dest :short)
  (type :int))

(cffi:defcfun ("fluid_sequencer_get_tick" fluid_sequencer_get_tick) :unsigned-int
  (seq :pointer))

(cffi:defcfun ("fluid_sequencer_set_time_scale" fluid_sequencer_set_time_scale) :void
  (seq :pointer)
  (scale :double))

(cffi:defcfun ("fluid_sequencer_get_time_scale" fluid_sequencer_get_time_scale) :double
  (seq :pointer))

(cl:defconstant FLUID_SEQ_WITH_TRACE 0)

(cffi:defcfun ("fluid_sequencer_register_fluidsynth" fluid_sequencer_register_fluidsynth) :short
  (seq :pointer)
  (synth :pointer))

(cffi:defcfun ("fluid_sequencer_add_midi_event_to_buffer" fluid_sequencer_add_midi_event_to_buffer) :int
  (data :pointer)
  (event :pointer))

(cffi:defcenum fluid_log_level
	:FLUID_PANIC
	:FLUID_ERR
	:FLUID_WARN
	:FLUID_INFO
	:FLUID_DBG
	:LAST_LOG_LEVEL)

(cffi:defctype fluid_log_function_t :pointer)

(cffi:defcfun ("fluid_set_log_function" fluid_set_log_function) :pointer
  (level :int)
  (fun :pointer)
  (data :pointer))

(cffi:defcfun ("fluid_default_log_function" fluid_default_log_function) :void
  (level :int)
  (message :string)
  (data :pointer))

(cffi:defcfun ("fluid_log" fluid_log) :int
  (level :int)
  (fmt :string)
  &rest)

(cl:defconstant FLUID_OK 0)

(cl:defconstant FLUID_FAILED -1)

(cffi:defcfun ("fluid_is_soundfont" fluid_is_soundfont) :int
  (filename :string))

(cffi:defcfun ("fluid_is_midifile" fluid_is_midifile) :int
  (filename :string))

(cl:defconstant FLUID_NUM_MOD 64)

(cffi:defcstruct _fluid_mod_t
	(dest :unsigned-char)
	(src1 :unsigned-char)
	(flags1 :unsigned-char)
	(src2 :unsigned-char)
	(flags2 :unsigned-char)
	(amount :double)
	(next :pointer))

(cffi:defcenum fluid_mod_flags
	(:FLUID_MOD_POSITIVE #.0)
	(:FLUID_MOD_NEGATIVE #.1)
	(:FLUID_MOD_UNIPOLAR #.0)
	(:FLUID_MOD_BIPOLAR #.2)
	(:FLUID_MOD_LINEAR #.0)
	(:FLUID_MOD_CONCAVE #.4)
	(:FLUID_MOD_CONVEX #.8)
	(:FLUID_MOD_SWITCH #.12)
	(:FLUID_MOD_GC #.0)
	(:FLUID_MOD_CC #.16))

(cffi:defcenum fluid_mod_src
	(:FLUID_MOD_NONE #.0)
	(:FLUID_MOD_VELOCITY #.2)
	(:FLUID_MOD_KEY #.3)
	(:FLUID_MOD_KEYPRESSURE #.10)
	(:FLUID_MOD_CHANNELPRESSURE #.13)
	(:FLUID_MOD_PITCHWHEEL #.14)
	(:FLUID_MOD_PITCHWHEELSENS #.16))

(cffi:defcfun ("fluid_mod_new" fluid_mod_new) :pointer)

(cffi:defcfun ("fluid_mod_delete" fluid_mod_delete) :void
  (mod :pointer))

(cffi:defcfun ("fluid_mod_set_source1" fluid_mod_set_source1) :void
  (mod :pointer)
  (src :int)
  (flags :int))

(cffi:defcfun ("fluid_mod_set_source2" fluid_mod_set_source2) :void
  (mod :pointer)
  (src :int)
  (flags :int))

(cffi:defcfun ("fluid_mod_set_dest" fluid_mod_set_dest) :void
  (mod :pointer)
  (dst :int))

(cffi:defcfun ("fluid_mod_set_amount" fluid_mod_set_amount) :void
  (mod :pointer)
  (amount :double))

(cffi:defcfun ("fluid_mod_get_source1" fluid_mod_get_source1) :int
  (mod :pointer))

(cffi:defcfun ("fluid_mod_get_flags1" fluid_mod_get_flags1) :int
  (mod :pointer))

(cffi:defcfun ("fluid_mod_get_source2" fluid_mod_get_source2) :int
  (mod :pointer))

(cffi:defcfun ("fluid_mod_get_flags2" fluid_mod_get_flags2) :int
  (mod :pointer))

(cffi:defcfun ("fluid_mod_get_dest" fluid_mod_get_dest) :int
  (mod :pointer))

(cffi:defcfun ("fluid_mod_get_amount" fluid_mod_get_amount) :double
  (mod :pointer))

(cffi:defcfun ("fluid_mod_test_identity" fluid_mod_test_identity) :int
  (mod1 :pointer)
  (mod2 :pointer))

(cffi:defcenum fluid_gen_type
	:GEN_STARTADDROFS
	:GEN_ENDADDROFS
	:GEN_STARTLOOPADDROFS
	:GEN_ENDLOOPADDROFS
	:GEN_STARTADDRCOARSEOFS
	:GEN_MODLFOTOPITCH
	:GEN_VIBLFOTOPITCH
	:GEN_MODENVTOPITCH
	:GEN_FILTERFC
	:GEN_FILTERQ
	:GEN_MODLFOTOFILTERFC
	:GEN_MODENVTOFILTERFC
	:GEN_ENDADDRCOARSEOFS
	:GEN_MODLFOTOVOL
	:GEN_UNUSED1
	:GEN_CHORUSSEND
	:GEN_REVERBSEND
	:GEN_PAN
	:GEN_UNUSED2
	:GEN_UNUSED3
	:GEN_UNUSED4
	:GEN_MODLFODELAY
	:GEN_MODLFOFREQ
	:GEN_VIBLFODELAY
	:GEN_VIBLFOFREQ
	:GEN_MODENVDELAY
	:GEN_MODENVATTACK
	:GEN_MODENVHOLD
	:GEN_MODENVDECAY
	:GEN_MODENVSUSTAIN
	:GEN_MODENVRELEASE
	:GEN_KEYTOMODENVHOLD
	:GEN_KEYTOMODENVDECAY
	:GEN_VOLENVDELAY
	:GEN_VOLENVATTACK
	:GEN_VOLENVHOLD
	:GEN_VOLENVDECAY
	:GEN_VOLENVSUSTAIN
	:GEN_VOLENVRELEASE
	:GEN_KEYTOVOLENVHOLD
	:GEN_KEYTOVOLENVDECAY
	:GEN_INSTRUMENT
	:GEN_RESERVED1
	:GEN_KEYRANGE
	:GEN_VELRANGE
	:GEN_STARTLOOPADDRCOARSEOFS
	:GEN_KEYNUM
	:GEN_VELOCITY
	:GEN_ATTENUATION
	:GEN_RESERVED2
	:GEN_ENDLOOPADDRCOARSEOFS
	:GEN_COARSETUNE
	:GEN_FINETUNE
	:GEN_SAMPLEID
	:GEN_SAMPLEMODE
	:GEN_RESERVED3
	:GEN_SCALETUNE
	:GEN_EXCLUSIVECLASS
	:GEN_OVERRIDEROOTKEY
	:GEN_PITCH
	:GEN_LAST)

(cffi:defcstruct fluid_gen_t
	(flags :unsigned-char)
	(val :double)
	(mod :double)
	(nrpn :double))

(cffi:defctype fluid_gen_t :pointer)

(cffi:defcenum fluid_gen_flags
	:GEN_UNUSED
	:GEN_SET
	:GEN_ABS_NRPN)

(cffi:defcfun ("fluid_gen_set_default_values" fluid_gen_set_default_values) :int
  (gen :pointer))

(cffi:defcfun ("fluid_voice_update_param" fluid_voice_update_param) :void
  (voice :pointer)
  (gen :int))

(cffi:defcenum fluid_voice_add_mod
	:FLUID_VOICE_OVERWRITE
	:FLUID_VOICE_ADD
	:FLUID_VOICE_DEFAULT)

(cffi:defcfun ("fluid_voice_gen_set" fluid_voice_gen_set) :void
  (voice :pointer)
  (gen :int)
  (val :float))

(cffi:defcfun ("fluid_voice_gen_get" fluid_voice_gen_get) :float
  (voice :pointer)
  (gen :int))

(cffi:defcfun ("fluid_voice_gen_incr" fluid_voice_gen_incr) :void
  (voice :pointer)
  (gen :int)
  (val :float))

(cffi:defcfun ("fluid_voice_get_id" fluid_voice_get_id) :unsigned-int
  (voice :pointer))

(cffi:defcfun ("fluid_voice_is_playing" fluid_voice_is_playing) :int
  (voice :pointer))

(cffi:defcfun ("fluid_voice_optimize_sample" fluid_voice_optimize_sample) :int
  (s :pointer))

(cl:defconstant FLUIDSYNTH_VERSION "1.1.6")

(cl:defconstant FLUIDSYNTH_VERSION_MAJOR 1)

(cl:defconstant FLUIDSYNTH_VERSION_MINOR 1)

(cl:defconstant FLUIDSYNTH_VERSION_MICRO 6)

(cffi:defcfun ("fluid_version" fluid_version) :void
  (major :pointer)
  (minor :pointer)
  (micro :pointer))

(cffi:defcfun ("fluid_version_str" fluid_version_str) :string)


